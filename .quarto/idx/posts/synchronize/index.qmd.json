{"title":"Synchronize","markdown":{"yaml":{"title":"Synchronize","author":"Jacen","date":"2022-5-18","categories":["OS","Thread"],"image":"t4lk3.jpg"},"headingText":"Introduction of Synchronization","containsRefs":false,"markdown":"\n\n \nSeveral variables changing over time keep relationship with each other.\n\n*Asynchronous* != synchronizate\n\n- Thread Synchronization\n\nLet's image two threads, the fisrt thread push data into the buf and the second thread pull data from the buf. In this case, they have to touch some conditon that the second thread can only do after the first thread.\n\nIn a short the Thread Synchronization is that some threads know each in an exact time point.\n\n## Producer-Consumer problem\n\nIn fact, the Producer is just like the first thread in the previous example and the consumer is the second thread.\n\nSo where is the problem.\n\n- The consumer may read the buf when there was no data in the buf. The data which read was useless and can damage the program.\n\n- As the producer, if it continues to add data to the buf ignore the empty place in the buf, buf is to overflow.\n\n### Condition Variables(CV)\n\n- Definition\n\nA condition variable is an explicit queue that threads can put themselves on when some state of execution is not as desired.\n\n \n`pthread_cond_t cv;`  \nTo declare a condition variable\n\n#### API\n\n- `wait(cv, mutex);`\n\n**Assume the caller having mutex**\n\nSet out the mutex and go to sleep\n\n- `signal/notify(cv);`\n\nwake up someone\n\n- `broadcast/notifyAll(cv);`\n\nwake up everyone\n\n*p-c by cv*\n\n```c\nvoid Tproduce() {\n\tmutex_lock(&lk);\n\tif (conunt == n) cond_wait(&cv, &lk);\n\tprintf(\"(\"); count++; cond_signal(&cv);\n\tmutex_unlock(&lk);\n}\n\nvoid Tconsume() {\n\tmutex_lock(&lk);\n\tif (count == 0) cond_wait(&cv, &lk);\n\tprintf(\")\"); count--l cond_signal(&cv);\n\tmutex_unlock(&lk);\n}\n```\n\n*paralled compute by cv*\n\n```c\nstruct job {\n\tvoid (*run)(void *arg)\n\tvoid *arg;\n}\n \nwhile (1) { \n\tstruct job *job;\n\tmutex_lock(&mutex);\n\twhile (! (job = get_job())) { \n\t\twait(&cv, &mutex);\n\t}\n\tmutex_unlock(&mutex);\n\tjob->run(job->arg);\n}\n```\n \n### Semaphores\n \nBy cv we can coordinate threads in defend of spinning. But can we coordinate more threads not one to use the shared resource.\n\nSemaphores invited by Edsger Dijkstra help us work better.\n\nIn cv only one can operate when get the critical conditon. Why not create more chances? Thread who can create a semaphore and enter the operation when it satisfies the condition. \n\n```c\n#include <semaphore.h>\nsem_t s;\nsem_init(&s, 0, 1);\n```\n#### Two Operation\n\n- P(proberen)\n\ntry+decrease; wait; down; in\n\n- V(verhogen)\n\nincrease; post;up;out\n \n*p-c by semaphore*\n\n```c\nvoid producer() { \n\tP(&empty);\n\tprintf(\"(\");\n\tV(&fill);\n}\n \nvoid consumer() { \n\tP(&fill);\n\tprintf(\")\");\n\tV(&empty);\n}\n```"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.scss"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.247","editor":"visual","smmooth-scroll":true,"theme":"journal","citation-hover":true,"footnotes-hover":true,"title-block-banner":true,"title":"Synchronize","author":"Jacen","date":"2022-5-18","categories":["OS","Thread"],"image":"t4lk3.jpg"},"extensions":{"book":{"multiFile":true}}}}}