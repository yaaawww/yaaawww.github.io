[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Escape Sky",
    "section": "",
    "text": "May 23, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMay 18, 2022\n\n\n\n\n\n\n\n\nNo matching items\n\n\n See all/Ver todos"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/bios/index.html",
    "href": "posts/bios/index.html",
    "title": "bios",
    "section": "",
    "text": "(Basic Input/Output System)"
  },
  {
    "objectID": "posts/bios/index.html#bios-function",
    "href": "posts/bios/index.html#bios-function",
    "title": "bios",
    "section": "bios function",
    "text": "bios function\nINT 0x10 = Video display functions (including VESA/VBE)\nINT 0x13 = mass storage (disk, floppy) access\nINT 0x15 = memory size functions\nINT 0x16 = keyboard functions\nINT 0x10, AH = 1 -- set up the cursor\nINT 0x10, AH = 3 -- cursor position\nINT 0x10, AH = 0x0E -- display char\nINT 0x10, AH = 0x0F -- get video page and mode\nINT 0x10, AH = 0x11 -- set 8x8 font\nINT 0x10, AH = 0x12 -- detect EGA/VGA\nINT 0x10, AH = 0x13 -- display string\nINT 0x10, AH = 0x1200 -- Alternate print screen\nINT 0x10, AH = 0x1201 -- turn off cursor emulation\nINT 0x10, AX = 0x4F00 -- video memory size\nINT 0x10, AX = 0x4F01 -- VESA get mode information call\nINT 0x10, AX = 0x4F02 -- select VESA video modes\nINT 0x10, AX = 0x4F0A -- VESA 2.0 protected mode interface\nINT 0x13, AH = 0 -- reset floppy/hard disk\nINT 0x13, AH = 2 -- read floppy/hard disk in CHS mode\nINT 0x13, AH = 3 -- write floppy/hard disk in CHS mode\nINT 0x13, AH = 0x15 -- detect second disk\nINT 0x13, AH = 0x41 -- test existence of INT 13 extensions\nINT 0x13, AH = 0x42 -- read hard disk in LBA mode\nINT 0x13, AH = 0x43 -- write hard disk in LBA mode\nINT 0x12 -- get low memory size\nINT 0x15, EAX = 0xE820 -- get complete memory map\nINT 0x15, AX = 0xE801 -- get contiguous memory size\nINT 0x15, AX = 0xE881 -- get contiguous memory size\nINT 0x15, AH = 0x88 -- get contiguous memory size\nINT 0x15, AH = 0xC0 -- Detect MCA bus\nINT 0x15, AX = 0x0530 -- Detect APM BIOS\nINT 0x15, AH = 0x5300 -- APM detect\nINT 0x15, AX = 0x5303 -- APM connect using 32 bit\nINT 0x15, AX = 0x5304 -- APM disconnect\nINT 0x16, AH = 0 -- read keyboard scancode (blocking)\nINT 0x16, AH = 1 -- read keyboard scancode (non-blocking)\nINT 0x16, AH = 3 -- keyboard repeat rate"
  },
  {
    "objectID": "posts/synchronize/index.html",
    "href": "posts/synchronize/index.html",
    "title": "Synchronize",
    "section": "",
    "text": "Several variables changing over time keep relationship with each other.\nAsynchronous != synchronizate\n\nThread Synchronization\n\nLet’s image two threads, the fisrt thread push data into the buf and the second thread pull data from the buf. In this case, they have to touch some conditon that the second thread can only do after the first thread.\nIn a short the Thread Synchronization is that some threads know each in an exact time point."
  },
  {
    "objectID": "posts/synchronize/index.html#producer-consumer-problem",
    "href": "posts/synchronize/index.html#producer-consumer-problem",
    "title": "Synchronize",
    "section": "Producer-Consumer problem",
    "text": "Producer-Consumer problem\nIn fact, the Producer is just like the first thread in the previous example and the consumer is the second thread.\nSo where is the problem.\n\nThe consumer may read the buf when there was no data in the buf. The data which read was useless and can damage the program.\nAs the producer, if it continues to add data to the buf ignore the empty place in the buf, buf is to overflow.\n\n\nCondition Variables(CV)\n\nDefinition\n\nA condition variable is an explicit queue that threads can put themselves on when some state of execution is not as desired.\npthread_cond_t cv;\nTo declare a condition variable\n\nAPI\n\nwait(cv, mutex);\n\nAssume the caller having mutex\nSet out the mutex and go to sleep\n\nsignal/notify(cv);\n\nwake up someone\n\nbroadcast/notifyAll(cv);\n\nwake up everyone\np-c by cv\nvoid Tproduce() {\n    mutex_lock(&lk);\n    if (conunt == n) cond_wait(&cv, &lk);\n    printf(\"(\"); count++; cond_signal(&cv);\n    mutex_unlock(&lk);\n}\n\nvoid Tconsume() {\n    mutex_lock(&lk);\n    if (count == 0) cond_wait(&cv, &lk);\n    printf(\")\"); count--l cond_signal(&cv);\n    mutex_unlock(&lk);\n}\nparalled compute by cv\nstruct job {\n    void (*run)(void *arg)\n    void *arg;\n}\n \nwhile (1) { \n    struct job *job;\n    mutex_lock(&mutex);\n    while (! (job = get_job())) { \n        wait(&cv, &mutex);\n    }\n    mutex_unlock(&mutex);\n    job->run(job->arg);\n}\n\n\n\nSemaphores\nBy cv we can coordinate threads in defend of spinning. But can we coordinate more threads not one to use the shared resource.\nSemaphores invited by Edsger Dijkstra help us work better.\nIn cv only one can operate when get the critical conditon. Why not create more chances? Thread who can create a semaphore and enter the operation when it satisfies the condition.\n#include <semaphore.h>\nsem_t s;\nsem_init(&s, 0, 1);\n\nTwo Operation\n\nP(proberen)\n\ntry+decrease; wait; down; in\n\nV(verhogen)\n\nincrease; post;up;out\np-c by semaphore\nvoid producer() { \n    P(&empty);\n    printf(\"(\");\n    V(&fill);\n}\n \nvoid consumer() { \n    P(&fill);\n    printf(\")\");\n    V(&empty);\n}"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nbios\n\n\n\nMay 23, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSynchronize\n\n\n\nMay 18, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#recent-talks-palestras-recentes",
    "href": "index.html#recent-talks-palestras-recentes",
    "title": "Escape Sky",
    "section": "Recent Talks / Palestras recentes",
    "text": "Recent Talks / Palestras recentes\n Next activities/Atividades futuras\n\n\n\n\n\nNo matching items\n\n\n See all/Ver todas"
  },
  {
    "objectID": "index.html#posts-in-english",
    "href": "index.html#posts-in-english",
    "title": "Escape Sky",
    "section": "Posts in English",
    "text": "Posts in English\n\n\n\n\n\nNo matching items\n\n\n See all posts in English"
  },
  {
    "objectID": "index.html#posts-em-português",
    "href": "index.html#posts-em-português",
    "title": "Escape Sky",
    "section": "Posts em Português",
    "text": "Posts em Português\n\n\n\n\n\nNo matching items\n\n\n Ver posts em Português"
  },
  {
    "objectID": "index.html#posts-en-español",
    "href": "index.html#posts-en-español",
    "title": "Escape Sky",
    "section": "Posts en Español",
    "text": "Posts en Español\n\n\n\n\n\nNo matching items"
  }
]